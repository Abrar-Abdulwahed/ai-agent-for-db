[
    {
        "label": "HumanMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "SystemMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "SystemMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "openai_key",
        "importPath": "basic_agent",
        "description": "basic_agent",
        "isExtraImport": true,
        "detail": "basic_agent",
        "documentation": {}
    },
    {
        "label": "create_pandas_dataframe_agent",
        "importPath": "langchain_experimental.agents.agent_toolkits",
        "description": "langchain_experimental.agents.agent_toolkits",
        "isExtraImport": true,
        "detail": "langchain_experimental.agents.agent_toolkits",
        "documentation": {}
    },
    {
        "label": "create_csv_agent",
        "importPath": "langchain_experimental.agents.agent_toolkits",
        "description": "langchain_experimental.agents.agent_toolkits",
        "isExtraImport": true,
        "detail": "langchain_experimental.agents.agent_toolkits",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "create_sql_agent",
        "importPath": "langchain_community.agent_toolkits.sql.base",
        "description": "langchain_community.agent_toolkits.sql.base",
        "isExtraImport": true,
        "detail": "langchain_community.agent_toolkits.sql.base",
        "documentation": {}
    },
    {
        "label": "SQLDatabaseToolkit",
        "importPath": "langchain_community.agent_toolkits.sql.toolkit",
        "description": "langchain_community.agent_toolkits.sql.toolkit",
        "isExtraImport": true,
        "detail": "langchain_community.agent_toolkits.sql.toolkit",
        "documentation": {}
    },
    {
        "label": "SQLDatabase",
        "importPath": "langchain_community.utilities",
        "description": "langchain_community.utilities",
        "isExtraImport": true,
        "detail": "langchain_community.utilities",
        "documentation": {}
    },
    {
        "label": "first_agent",
        "kind": 2,
        "importPath": "basic_agent",
        "description": "basic_agent",
        "peekOfCode": "def first_agent(messages):\n    res = model.invoke(messages)\n    return res\ndef run_agent():\n    print(\"Simple AI Agent: Type 'exit' to quit\")\n    while True:\n        user_input = input(\"You: \")\n        if user_input.lower() == \"exit\":\n            print(\"Goodbye!\")\n            break",
        "detail": "basic_agent",
        "documentation": {}
    },
    {
        "label": "run_agent",
        "kind": 2,
        "importPath": "basic_agent",
        "description": "basic_agent",
        "peekOfCode": "def run_agent():\n    print(\"Simple AI Agent: Type 'exit' to quit\")\n    while True:\n        user_input = input(\"You: \")\n        if user_input.lower() == \"exit\":\n            print(\"Goodbye!\")\n            break\n        print(\"AI Agent is thinking...\")\n        messages = [HumanMessage(content=user_input)]\n        response = first_agent(messages)",
        "detail": "basic_agent",
        "documentation": {}
    },
    {
        "label": "openai_key",
        "kind": 5,
        "importPath": "basic_agent",
        "description": "basic_agent",
        "peekOfCode": "openai_key = os.getenv(\"OPENAI_API_KEY\")\nllm_name = \"gpt-3.5-turbo\"\nmodel = ChatOpenAI(api_key=openai_key, model=llm_name)\nmessages = [\n    # role knowledge base\n    SystemMessage(content=\"You are a helpful assistant who is extremely competent as a Computer Scientist! Your name is Rob.\"),\n    HumanMessage(content=\"who was the very first computer scientist?\")\n]\n# res = model.invoke(messages)\n# print(res)",
        "detail": "basic_agent",
        "documentation": {}
    },
    {
        "label": "llm_name",
        "kind": 5,
        "importPath": "basic_agent",
        "description": "basic_agent",
        "peekOfCode": "llm_name = \"gpt-3.5-turbo\"\nmodel = ChatOpenAI(api_key=openai_key, model=llm_name)\nmessages = [\n    # role knowledge base\n    SystemMessage(content=\"You are a helpful assistant who is extremely competent as a Computer Scientist! Your name is Rob.\"),\n    HumanMessage(content=\"who was the very first computer scientist?\")\n]\n# res = model.invoke(messages)\n# print(res)\ndef first_agent(messages):",
        "detail": "basic_agent",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "basic_agent",
        "description": "basic_agent",
        "peekOfCode": "model = ChatOpenAI(api_key=openai_key, model=llm_name)\nmessages = [\n    # role knowledge base\n    SystemMessage(content=\"You are a helpful assistant who is extremely competent as a Computer Scientist! Your name is Rob.\"),\n    HumanMessage(content=\"who was the very first computer scientist?\")\n]\n# res = model.invoke(messages)\n# print(res)\ndef first_agent(messages):\n    res = model.invoke(messages)",
        "detail": "basic_agent",
        "documentation": {}
    },
    {
        "label": "messages",
        "kind": 5,
        "importPath": "basic_agent",
        "description": "basic_agent",
        "peekOfCode": "messages = [\n    # role knowledge base\n    SystemMessage(content=\"You are a helpful assistant who is extremely competent as a Computer Scientist! Your name is Rob.\"),\n    HumanMessage(content=\"who was the very first computer scientist?\")\n]\n# res = model.invoke(messages)\n# print(res)\ndef first_agent(messages):\n    res = model.invoke(messages)\n    return res",
        "detail": "basic_agent",
        "documentation": {}
    },
    {
        "label": "openai_key",
        "kind": 5,
        "importPath": "csv_agent",
        "description": "csv_agent",
        "peekOfCode": "openai_key = os.getenv('OPENAI_API_KEY')\nllm_name=\"gpt-3.5-turbo\"\nmodel = ChatOpenAI(api_key=openai_key, model=llm_name)\n# read csv file\ndf = pd.read_csv(\"./data/salaries_2023.csv\").fillna(value=0)\n# gives last 5 rows only\n# print(df.head()) \nagent = create_pandas_dataframe_agent(\n    llm=model,\n    df=df,",
        "detail": "csv_agent",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "csv_agent",
        "description": "csv_agent",
        "peekOfCode": "model = ChatOpenAI(api_key=openai_key, model=llm_name)\n# read csv file\ndf = pd.read_csv(\"./data/salaries_2023.csv\").fillna(value=0)\n# gives last 5 rows only\n# print(df.head()) \nagent = create_pandas_dataframe_agent(\n    llm=model,\n    df=df,\n    verbose=True,\n    allow_dangerous_code=True # => locally only (security risk)",
        "detail": "csv_agent",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "csv_agent",
        "description": "csv_agent",
        "peekOfCode": "df = pd.read_csv(\"./data/salaries_2023.csv\").fillna(value=0)\n# gives last 5 rows only\n# print(df.head()) \nagent = create_pandas_dataframe_agent(\n    llm=model,\n    df=df,\n    verbose=True,\n    allow_dangerous_code=True # => locally only (security risk)\n)\n# res = agent.invoke(\"how many rows are there in the dataframe?\")",
        "detail": "csv_agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "csv_agent",
        "description": "csv_agent",
        "peekOfCode": "agent = create_pandas_dataframe_agent(\n    llm=model,\n    df=df,\n    verbose=True,\n    allow_dangerous_code=True # => locally only (security risk)\n)\n# res = agent.invoke(\"how many rows are there in the dataframe?\")\n# print(res)\nCSV_PROMPT_PREFIX = \"\"\"\nFirst set the pandas display options to show all the columns,",
        "detail": "csv_agent",
        "documentation": {}
    },
    {
        "label": "CSV_PROMPT_PREFIX",
        "kind": 5,
        "importPath": "csv_agent",
        "description": "csv_agent",
        "peekOfCode": "CSV_PROMPT_PREFIX = \"\"\"\nFirst set the pandas display options to show all the columns,\nget the column names, then answer the question.\n\"\"\"\nCSV_PROMPT_SUFFIX = \"\"\"\n- **ALWAYS** before giving the Final Answer, try another method.\nThen reflect on the answers of the two methods you did and ask yourself\nif it answers correctly the original question.\nIf you are not sure, try another method.\nFORMAT 4 FIGURES OR MORE WITH COMMAS.",
        "detail": "csv_agent",
        "documentation": {}
    },
    {
        "label": "CSV_PROMPT_SUFFIX",
        "kind": 5,
        "importPath": "csv_agent",
        "description": "csv_agent",
        "peekOfCode": "CSV_PROMPT_SUFFIX = \"\"\"\n- **ALWAYS** before giving the Final Answer, try another method.\nThen reflect on the answers of the two methods you did and ask yourself\nif it answers correctly the original question.\nIf you are not sure, try another method.\nFORMAT 4 FIGURES OR MORE WITH COMMAS.\n- If the methods tried do not give the same result,reflect and\ntry again until you have two methods that have the same result.\n- If you still cannot arrive to a consistent result, say that\nyou are not sure of the answer.",
        "detail": "csv_agent",
        "documentation": {}
    },
    {
        "label": "QUESTION",
        "kind": 5,
        "importPath": "csv_agent",
        "description": "csv_agent",
        "peekOfCode": "QUESTION = \"Which grade has the highest average base salary, and compare the average female pay vs male pay?\"\n# res = agent.invoke(CSV_PROMPT_PREFIX + QUESTION + CSV_PROMPT_SUFFIX)\n# print(f\"Final result: {res[\"output\"]}\")\nst.title('Database agent with LangChain')\nst.write(\"### Dataset Preview\")\nst.write(df.head())\n# User input for the question\nst.write(\"### Ask a Question\")\nquestion = st.text_input(\n    \"Enter your question about the dataset:\",",
        "detail": "csv_agent",
        "documentation": {}
    },
    {
        "label": "question",
        "kind": 5,
        "importPath": "csv_agent",
        "description": "csv_agent",
        "peekOfCode": "question = st.text_input(\n    \"Enter your question about the dataset:\",\n    \"Which grade has the highest average base salary, and compare the average female pay vs male pay?\",\n)\n# Run the agent and display the result\nif st.button(\"Run Query\"):\n    QUERY = CSV_PROMPT_PREFIX + question + CSV_PROMPT_SUFFIX\n    res = agent.invoke(QUERY)\n    st.write(\"### Final Answer\")\n    st.markdown(res[\"output\"])",
        "detail": "csv_agent",
        "documentation": {}
    },
    {
        "label": "database_file_path",
        "kind": 5,
        "importPath": "csv_to_sql",
        "description": "csv_to_sql",
        "peekOfCode": "database_file_path = \"./db/salary.db\"\n# Create an engine to connect to the SQLite database\n# SQLite only requires the path to the database file\nengine = create_engine(f\"sqlite:///{database_file_path}\")\nfile_url = \"./data/salaries_2023.csv\"\nos.makedirs(os.path.dirname(database_file_path), exist_ok=True)\ndf = pd.read_csv(file_url).fillna(value=0)\ndf.to_sql(\"salaries_2023\", con=engine, if_exists=\"replace\", index=False)",
        "detail": "csv_to_sql",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "csv_to_sql",
        "description": "csv_to_sql",
        "peekOfCode": "engine = create_engine(f\"sqlite:///{database_file_path}\")\nfile_url = \"./data/salaries_2023.csv\"\nos.makedirs(os.path.dirname(database_file_path), exist_ok=True)\ndf = pd.read_csv(file_url).fillna(value=0)\ndf.to_sql(\"salaries_2023\", con=engine, if_exists=\"replace\", index=False)",
        "detail": "csv_to_sql",
        "documentation": {}
    },
    {
        "label": "file_url",
        "kind": 5,
        "importPath": "csv_to_sql",
        "description": "csv_to_sql",
        "peekOfCode": "file_url = \"./data/salaries_2023.csv\"\nos.makedirs(os.path.dirname(database_file_path), exist_ok=True)\ndf = pd.read_csv(file_url).fillna(value=0)\ndf.to_sql(\"salaries_2023\", con=engine, if_exists=\"replace\", index=False)",
        "detail": "csv_to_sql",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "csv_to_sql",
        "description": "csv_to_sql",
        "peekOfCode": "df = pd.read_csv(file_url).fillna(value=0)\ndf.to_sql(\"salaries_2023\", con=engine, if_exists=\"replace\", index=False)",
        "detail": "csv_to_sql",
        "documentation": {}
    },
    {
        "label": "get_current_weather",
        "kind": 2,
        "importPath": "func_call",
        "description": "func_call",
        "peekOfCode": "def get_current_weather(location, unit=\"fahrenheit\"):\n    \"\"\"Get the current weather in a given location\"\"\"\n    if \"tokyo\" in location.lower():\n        return json.dumps({\"location\": \"Tokyo\", \"temperature\": \"10\", \"unit\": unit})\n    elif \"san francisco\" in location.lower():\n        return json.dumps(\n            {\"location\": \"San Francisco\", \"temperature\": \"72\", \"unit\": unit}\n        )\n    elif \"paris\" in location.lower():\n        return json.dumps({\"location\": \"Paris\", \"temperature\": \"22\", \"unit\": unit})",
        "detail": "func_call",
        "documentation": {}
    },
    {
        "label": "run_conversation",
        "kind": 2,
        "importPath": "func_call",
        "description": "func_call",
        "peekOfCode": "def run_conversation():\n    # Step 1: send the conversation and available functions to the model\n    messages = [\n        {\n            \"role\": \"user\",\n            \"content\": \"What's the weather like in San Francisco, Tokyo, and Paris?\",\n        }\n    ]\n    # Define the available functions\n    tools = [",
        "detail": "func_call",
        "documentation": {}
    },
    {
        "label": "openai_key",
        "kind": 5,
        "importPath": "func_call",
        "description": "func_call",
        "peekOfCode": "openai_key = os.getenv(\"OPENAI_API_KEY\")\n# for the weather function calling\nclient = OpenAI(api_key=openai_key)\n# Example dummy function hard coded to return the same weather\n# In production, this could be your backend API or an external API\ndef get_current_weather(location, unit=\"fahrenheit\"):\n    \"\"\"Get the current weather in a given location\"\"\"\n    if \"tokyo\" in location.lower():\n        return json.dumps({\"location\": \"Tokyo\", \"temperature\": \"10\", \"unit\": unit})\n    elif \"san francisco\" in location.lower():",
        "detail": "func_call",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "func_call",
        "description": "func_call",
        "peekOfCode": "client = OpenAI(api_key=openai_key)\n# Example dummy function hard coded to return the same weather\n# In production, this could be your backend API or an external API\ndef get_current_weather(location, unit=\"fahrenheit\"):\n    \"\"\"Get the current weather in a given location\"\"\"\n    if \"tokyo\" in location.lower():\n        return json.dumps({\"location\": \"Tokyo\", \"temperature\": \"10\", \"unit\": unit})\n    elif \"san francisco\" in location.lower():\n        return json.dumps(\n            {\"location\": \"San Francisco\", \"temperature\": \"72\", \"unit\": unit}",
        "detail": "func_call",
        "documentation": {}
    },
    {
        "label": "openai_key",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "openai_key = os.getenv(\"OPENAI_API_KEY\")\nllm_name = \"gpt-3.5-turbo\"\nmodel = ChatOpenAI(api_key=openai_key, model=llm_name)\n# create a db from csv file\n# Path to your SQLite database file\ndatabase_file_path = \"./db/salary.db\"\n# Create an engine to connect to the SQLite database\n# SQLite only requires the path to the database file\nengine = create_engine(f\"sqlite:///{database_file_path}\")\nfile_url = \"./data/salaries_2023.csv\"",
        "detail": "sql_db_agent",
        "documentation": {}
    },
    {
        "label": "llm_name",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "llm_name = \"gpt-3.5-turbo\"\nmodel = ChatOpenAI(api_key=openai_key, model=llm_name)\n# create a db from csv file\n# Path to your SQLite database file\ndatabase_file_path = \"./db/salary.db\"\n# Create an engine to connect to the SQLite database\n# SQLite only requires the path to the database file\nengine = create_engine(f\"sqlite:///{database_file_path}\")\nfile_url = \"./data/salaries_2023.csv\"\nos.makedirs(os.path.dirname(database_file_path), exist_ok=True)",
        "detail": "sql_db_agent",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "model = ChatOpenAI(api_key=openai_key, model=llm_name)\n# create a db from csv file\n# Path to your SQLite database file\ndatabase_file_path = \"./db/salary.db\"\n# Create an engine to connect to the SQLite database\n# SQLite only requires the path to the database file\nengine = create_engine(f\"sqlite:///{database_file_path}\")\nfile_url = \"./data/salaries_2023.csv\"\nos.makedirs(os.path.dirname(database_file_path), exist_ok=True)\ndf = pd.read_csv(file_url).fillna(value=0)",
        "detail": "sql_db_agent",
        "documentation": {}
    },
    {
        "label": "database_file_path",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "database_file_path = \"./db/salary.db\"\n# Create an engine to connect to the SQLite database\n# SQLite only requires the path to the database file\nengine = create_engine(f\"sqlite:///{database_file_path}\")\nfile_url = \"./data/salaries_2023.csv\"\nos.makedirs(os.path.dirname(database_file_path), exist_ok=True)\ndf = pd.read_csv(file_url).fillna(value=0)\ndf.to_sql(\"salaries_2023\", con=engine, if_exists=\"replace\", index=False)\n# print(f\"Database created successfully! {df}\")\n# Part 2: Prepare the sql prompt",
        "detail": "sql_db_agent",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "engine = create_engine(f\"sqlite:///{database_file_path}\")\nfile_url = \"./data/salaries_2023.csv\"\nos.makedirs(os.path.dirname(database_file_path), exist_ok=True)\ndf = pd.read_csv(file_url).fillna(value=0)\ndf.to_sql(\"salaries_2023\", con=engine, if_exists=\"replace\", index=False)\n# print(f\"Database created successfully! {df}\")\n# Part 2: Prepare the sql prompt\nMSSQL_AGENT_PREFIX = \"\"\"\nYou are an agent designed to interact with a SQL database.\n## Instructions:",
        "detail": "sql_db_agent",
        "documentation": {}
    },
    {
        "label": "file_url",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "file_url = \"./data/salaries_2023.csv\"\nos.makedirs(os.path.dirname(database_file_path), exist_ok=True)\ndf = pd.read_csv(file_url).fillna(value=0)\ndf.to_sql(\"salaries_2023\", con=engine, if_exists=\"replace\", index=False)\n# print(f\"Database created successfully! {df}\")\n# Part 2: Prepare the sql prompt\nMSSQL_AGENT_PREFIX = \"\"\"\nYou are an agent designed to interact with a SQL database.\n## Instructions:\n- Given an input question, create a syntactically correct {dialect} query",
        "detail": "sql_db_agent",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "df = pd.read_csv(file_url).fillna(value=0)\ndf.to_sql(\"salaries_2023\", con=engine, if_exists=\"replace\", index=False)\n# print(f\"Database created successfully! {df}\")\n# Part 2: Prepare the sql prompt\nMSSQL_AGENT_PREFIX = \"\"\"\nYou are an agent designed to interact with a SQL database.\n## Instructions:\n- Given an input question, create a syntactically correct {dialect} query\nto run, then look at the results of the query and return the answer.\n- Unless the user specifies a specific number of examples they wish to",
        "detail": "sql_db_agent",
        "documentation": {}
    },
    {
        "label": "MSSQL_AGENT_PREFIX",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "MSSQL_AGENT_PREFIX = \"\"\"\nYou are an agent designed to interact with a SQL database.\n## Instructions:\n- Given an input question, create a syntactically correct {dialect} query\nto run, then look at the results of the query and return the answer.\n- Unless the user specifies a specific number of examples they wish to\nobtain, **ALWAYS** limit your query to at most {top_k} results.\n- You can order the results by a relevant column to return the most\ninteresting examples in the database.\n- Never query for all the columns from a specific table, only ask for",
        "detail": "sql_db_agent",
        "documentation": {}
    },
    {
        "label": "MSSQL_AGENT_FORMAT_INSTRUCTIONS",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "MSSQL_AGENT_FORMAT_INSTRUCTIONS = \"\"\"\n## Use the following format:\nQuestion: the input question you must answer.\nThought: you should always think about what to do.\nAction: the action to take, should be one of [{tool_names}].\nAction Input: the input to the action.\nObservation: the result of the action.\n... (this Thought/Action/Action Input/Observation can repeat N times)\nThought: I now know the final answer.\nFinal Answer: the final answer to the original input question.",
        "detail": "sql_db_agent",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "db = SQLDatabase.from_uri(f\"sqlite:///{database_file_path}\")\ntoolkit = SQLDatabaseToolkit(db=db, llm=model)\nQUESTION = \"\"\"what is the highest average salary by department, and give me the number?\"\n\"\"\"\nsql_agent = create_sql_agent(\n    prefix=MSSQL_AGENT_PREFIX,\n    format_instructions=MSSQL_AGENT_FORMAT_INSTRUCTIONS,\n    llm=model,\n    toolkit=toolkit,\n    top_k=30,",
        "detail": "sql_db_agent",
        "documentation": {}
    },
    {
        "label": "toolkit",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "toolkit = SQLDatabaseToolkit(db=db, llm=model)\nQUESTION = \"\"\"what is the highest average salary by department, and give me the number?\"\n\"\"\"\nsql_agent = create_sql_agent(\n    prefix=MSSQL_AGENT_PREFIX,\n    format_instructions=MSSQL_AGENT_FORMAT_INSTRUCTIONS,\n    llm=model,\n    toolkit=toolkit,\n    top_k=30,\n    verbose=True,",
        "detail": "sql_db_agent",
        "documentation": {}
    },
    {
        "label": "QUESTION",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "QUESTION = \"\"\"what is the highest average salary by department, and give me the number?\"\n\"\"\"\nsql_agent = create_sql_agent(\n    prefix=MSSQL_AGENT_PREFIX,\n    format_instructions=MSSQL_AGENT_FORMAT_INSTRUCTIONS,\n    llm=model,\n    toolkit=toolkit,\n    top_k=30,\n    verbose=True,\n)",
        "detail": "sql_db_agent",
        "documentation": {}
    },
    {
        "label": "sql_agent",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "sql_agent = create_sql_agent(\n    prefix=MSSQL_AGENT_PREFIX,\n    format_instructions=MSSQL_AGENT_FORMAT_INSTRUCTIONS,\n    llm=model,\n    toolkit=toolkit,\n    top_k=30,\n    verbose=True,\n)\n# res = sql_agent.invoke(QUESTION)\n# print(res)",
        "detail": "sql_db_agent",
        "documentation": {}
    },
    {
        "label": "question",
        "kind": 5,
        "importPath": "sql_db_agent",
        "description": "sql_db_agent",
        "peekOfCode": "question = st.text_input(\"Enter your query:\")\nif st.button(\"Run Query\"):\n    if question:\n        res = sql_agent.invoke(question)\n        st.markdown(res[\"output\"])\nelse:\n    st.error(\"Please enter a query.\")",
        "detail": "sql_db_agent",
        "documentation": {}
    }
]